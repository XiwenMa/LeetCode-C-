// dp problem.
// build the dp matrix and we found dp[i][j] is set to true if (dp[i][j-1] && s2[j-1] == s3[i+j-1]) || (dp[i-1][j] && s1[i-1] == s3[i+j-1])
//      d b b c a
//    O X X X X X
//  a O X X X X X
//  a O O O O O X
//  b X O O X O X
//  c X X O X O O
//  c X X X X X O
//
// s1 = aabcc, s2 = dbbca, s3 = aadbbcbcac



class Solution {
public:
    /**
     * Determine whether s3 is formed by interleaving of s1 and s2.
     * @param s1, s2, s3: As description.
     * @return: true of false.
     */
    bool isInterleave(string s1, string s2, string s3) {
        // write your code here
        
        if (s1.length()+s2.length() != s3.length())
            return false;
            
        int i, j;
        bool dp[s1.length()+1][s2.length()+1];
        dp[0][0] = true;
        
        for (i = 0; i < s1.length(); i++)
        {
            if (s1[i] == s3[i])
                dp[i+1][0] = true;
            
            if (s1[i] != s3[i])
            {
                while(i < s1.length())
                {
                    dp[i+1][0] = false;
                    i++;
                }
                
                break;
            }
        }
        
        for (i = 0; i < s2.length(); i++)
        {
            if (s2[i] == s3[i])
                dp[0][i+1] = true;
            
            if (s2[i] != s3[i])
            {
                while(i < s2.length())
                {
                    dp[0][i+1] = false;
                    i++;
                }
                
                break;
            }
        }
        
        for (i = 1; i <= s1.length(); i++)
            for (j = 1; j <= s2.length(); j++)
            {
                if ((dp[i][j-1] && s2[j-1] == s3[i+j-1]) || (dp[i-1][j] && s1[i-1] == s3[i+j-1]))
                    dp[i][j] = true;
                    
                else dp[i][j] = false;
            }
            
        return dp[s1.length()][s2.length()];
    }
};
