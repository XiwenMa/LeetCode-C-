// Fisrt we check the numbers of both negative and positive.
// if negInt > posInt, the vector start and end with both negatives; 
// if negInt < posInt, the vector start and end with both positives;
// if negInt = posInt, the vector start with a positive and end with a negative, vice versa.
// keep track if two adjacent numbers have the same sign, from both the beginning and the end of the vector.
// when the above situation happens, we check if two problem numbers are the same sign: if not, swap them.
// if is, we track numbers between these two problem numbers and swap if some number have the different swap.




class Solution {
public:
    /**
     * @param A: An integer array.
     * @return: void
     */
    void rerange(vector<int> &A) {
        // write your code here
        
        int negInt = 0, posInt = 0, i, j;
        
        for (i = 0; i < A.size(); i++)
        {
            if (A[i] > 0)
                posInt++;
                
            if (A[i] < 0)
                negInt++;
        }
        
        if (posInt > negInt)
        {
            if (A[0] < 0)
            {
                for (i = 1; i < A.size(); i++)
                    if (A[i] > 0)
                    {
                        swap(A[0], A[i]);
                        break;
                    }
                
            }
            
            if (A[A.size()-1] < 0)
            {
                for (i = A.size()-1; i >=0; i--)
                    if (A[i] > 0)
                    {
                        swap(A[A.size()-1], A[i]);
                        break;
                    }
            }
        }
        
        else if (posInt < negInt)
        {
            if (A[0] > 0)
            {
                for (i = 1; i < A.size(); i++)
                    if (A[i] < 0)
                    {
                        swap(A[0], A[i]);
                        break;
                    }
            }
            
            if (A[A.size()-1] > 0)
            {
                for (i = A.size()-2; i >=0; i--)
                    if (A[i] < 0)
                    {
                        swap(A[A.size()-1], A[i]);
                        break;
                    }
            }
        }
        
        else
        {
            if (A[0]*A[A.size()-1]>0)
            {
                for (i = A.size()-2; i >=0; i--)
                    if (A[0]*A[i] < 0)
                    {
                        swap(A[A.size()-1], A[i]);
                        break;
                    }
            }
        }
        
        i = 1;
        j = A.size()-2;
        
        while (i < j)
        {
            while (A[i-1]*A[i] < 0)
            {
                i++;
                
                if (i == j)
                    break;
            }
                
            while (A[j+1]*A[j] < 0)
            {
                j--;
                
                if (i == j)
                break;
            }
            
            if (A[i]*A[j] < 0)
            {
                swap(A[i], A[j]);
                continue;
            }
            
            int k = i+1, l = j-1;
                
            while (k < l)
            {
                if (A[i]*A[k]<0)
                {
                    swap(A[i], A[k]);
                    break;
                }
                
                k++;
            }
                
            while (k < l)
            {
                if (A[j]*A[l]<0)
                {
                    swap(A[j], A[l]);
                    break;
                }
                
                l--;
            }
        }
    }
};
