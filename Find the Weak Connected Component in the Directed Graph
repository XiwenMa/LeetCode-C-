//create double-direction edges for each pair of vertice. level order search from every node that is not visited.
//Notice that during creating double-direction edges, if the node points to itself, dont make it a double-direction edge,
//or it will result memory exceeded.
//unsolvable memory use: use vector.push, which result duplicates and useless memory.




/**
 * Definition for Directed graph.
 * struct DirectedGraphNode {
 *     int label;
 *     vector<DirectedGraphNode *> neighbors;
 *     DirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    /**
     * @param nodes a array of directed graph node
     * @return a connected set of a directed graph
     */
     
    void helper(DirectedGraphNode* node, map<DirectedGraphNode*, bool> &visited,
                vector<vector<int>> &res, vector<int> &temp)
    {
        if (visited[node] == true)
            return;
            
        visited[node] = true;
        temp.push_back(node->label);
            
        for (int i = 0; i < node->neighbors.size(); i++)
            if (visited.find(node->neighbors[i]) == visited.end())
            {
                //visited[node->neighbors[i]] = true;
                //temp.push_back(node->neighbors[i]->label);
                helper(node->neighbors[i], visited, res, temp);
            }
    }
     
     
    vector<vector<int>> connectedSet2(vector<DirectedGraphNode*>& nodes) {
        // Write your code here
        vector<vector<int>> res;
        map<DirectedGraphNode*, bool> visited;
        int i , j;
        vector<int> temp;
        
        for (i = 0; i < nodes.size(); i++)
            for (j = 0; j < nodes[i]->neighbors.size(); j++)
            {
                if (nodes[i]->label != nodes[i]->neighbors[j]->label)    
                    nodes[i]->neighbors[j]->neighbors.push_back(nodes[i]);
            }
        
        for (i = 0; i < nodes.size(); i++)
        {
            if (visited.find(nodes[i]) == visited.end())
            {
                helper(nodes[i], visited, res, temp);
                
                sort(temp.begin(), temp.end());
                res.push_back(temp);
                temp.clear();
            }
        }
        
        return res;
    }
};
