// List all the special cases and special combinations, recursively test if n/romanInt is not zero
// if it is, means something Roman Interal can be written down, and delete that number.




class Solution {
public:
    /**
     * @param n The integer
     * @return Roman representation
     */
    string intToRoman(int n) {
        // Write your code here
        string res = "";
        string roman[13] = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
        int romanInt[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        
        for (int i = 0; i < 13; i++)
        {
            if (n == 0)
                break;
                
            if (n/romanInt[i] == 0)
                continue;
            
            if (n/romanInt[i] != 0)
            {
                for (int j = 0; j < n/romanInt[i]; j++)
                    res += roman[i];
                
                n = n - romanInt[i]*(n/romanInt[i]);
            }
        }
    
        return res;    
    }
};
