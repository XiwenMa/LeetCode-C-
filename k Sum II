// pretty like combination sum




class Solution {
public:
    /**
     * @param A: an integer array.
     * @param k: a positive integer (k <= length(A))
     * @param target: a integer
     * @return a list of lists of integer 
     */
     
    void helper(vector<vector<int>> &res, vector<int> A, int k, int target,
                int startIndex, vector<int> temp, int sum)
    {
        if (sum > target)
            return;
            
        if (k == 0)
        {
            if (sum == target)
                res.push_back(temp);
            return;
        }
        
        for (int i = startIndex; i < A.size(); i++)
        {
            temp.push_back(A[i]);
            sum += A[i];
            
            helper(res, A, k-1, target, i+1, temp, sum);
            
            sum -= A[i];
            temp.pop_back();
        }
    }     
     
    vector<vector<int> > kSumII(vector<int> A, int k, int target) {
        // write your code here
        vector<vector<int>> res;
        int sum = 0;
        vector<int> temp;
        
        helper(res, A, k, target, 0, temp, sum);
        
        return res;
    }
};
